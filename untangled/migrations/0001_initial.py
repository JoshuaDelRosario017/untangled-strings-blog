# Generated by Django 4.1.3 on 2023-01-17 08:52

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import untangled.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blog_categories', models.CharField(max_length=50, verbose_name='category')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Blogs',
            fields=[
                ('blog_id', models.AutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('blog_thumbnail', models.ImageField(default='/media/blogpost_cover.jpg', upload_to=untangled.models.image_path)),
                ('blog_title', models.CharField(max_length=200, verbose_name='Blog Title')),
                ('blog_description', models.TextField(default='', max_length=255, verbose_name='Blog Description')),
                ('blog_body', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Blog Body')),
                ('blog_pubdate', models.DateTimeField(null=True)),
                ('blog_author', models.CharField(default=False, max_length=100, verbose_name='Blog Author')),
                ('blog_category', models.CharField(default=False, max_length=50, verbose_name='Blog Category')),
                ('deleted_on', models.DateTimeField(null=True, verbose_name='Deleted Date-Time')),
                ('is_draft', models.BooleanField(default=False)),
                ('blog_userid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(related_name='blog_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['blog_id'],
            },
        ),
    ]
